{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP0wX4V18X1Ig5pcfB8xCt/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Variables**\n","\n","Variables are containers for storing Data Values."],"metadata":{"id":"JQEBl-E-fcu4"}},{"cell_type":"code","source":["x = 5\n","print(x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hq_KVUxMfl16","executionInfo":{"status":"ok","timestamp":1736852860151,"user_tz":-330,"elapsed":12,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"19f3b2ae-63fb-439b-ade9-d5a8fddde66c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":["Name = \"Anurag\"\n","print(Name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kG-U2vLsgDko","executionInfo":{"status":"ok","timestamp":1736852934991,"user_tz":-330,"elapsed":478,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"266350df-ee14-4c27-e701-13dd5b82f80b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Anurag\n"]}]},{"cell_type":"markdown","source":["# **Variables Naming**"],"metadata":{"id":"y0gvOKDmhAxT"}},{"cell_type":"code","source":["# 1. A variable name must be start with a letter.\n","# For Example\n","ChannelName = \"CodewithAK\"\n","print(ChannelName)\n","\n","# 2. A variable name must start with underscore\n","_ChannelName = \"CodewithAK\"\n","print(_ChannelName)\n","\n","# 3. A variable name can only conatian aplha-numeric characters and underscores (A-z, 0-9, and _ )\n","Channel_Name = \"CodewithAK\"\n","print(Channel_Name)\n","\n","ChannelName21K = \"CodewithAK\"\n","print(ChannelName21K)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v_t0NnMag6K0","executionInfo":{"status":"ok","timestamp":1736853595515,"user_tz":-330,"elapsed":985,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"a858cf8f-5e43-4836-9dd5-548630a5d6b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CodewithAK\n","CodewithAK\n","CodewithAK\n","CodewithAK\n"]}]},{"cell_type":"code","source":["# 4. A variable names are case:sensitive\n","\n","ChannelName = \"CodewithAK\"\n","channelname = \"CodewithAK\"\n","print(ChannelName)\n","print(channelname)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lwVfxRmXEU_B","executionInfo":{"status":"ok","timestamp":1736929568678,"user_tz":-330,"elapsed":521,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"b801183a-e773-410e-da00-d3e84e22d21b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CodewithAK\n","CodewithAK\n"]}]},{"cell_type":"markdown","source":["# **Illegal Variable Names:**"],"metadata":{"id":"hCjAbsUDEpAw"}},{"cell_type":"code","source":["# 5. A variable name cannot start with number\n","\n","50kChannelName = \"CodewithAK\"\n","print(50kChannelName)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"kYaWxy90FJNY","executionInfo":{"status":"error","timestamp":1736929839517,"user_tz":-330,"elapsed":627,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"826ed46b-36fc-4f43-a565-4e9b6302de4e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid decimal literal (<ipython-input-4-5620963a2ba4>, line 3)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-5620963a2ba4>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    50kChannelName = \"CodewithAK\"\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"]}]},{"cell_type":"code","source":["# 6. In variable name cannot use -\n","\n","Channel-Name = \"CodewithAK\"\n","print(Channel-Name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"o5Q7IKdJFj1W","executionInfo":{"status":"error","timestamp":1736929988433,"user_tz":-330,"elapsed":500,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"72ae4e9f-0dc8-4c93-87bd-b6fed90d2d22"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"cannot assign to expression here. Maybe you meant '==' instead of '='? (<ipython-input-5-0b2ebc8534a8>, line 3)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-0b2ebc8534a8>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    Channel-Name = \"CodewithAK\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to expression here. Maybe you meant '==' instead of '='?\n"]}]},{"cell_type":"code","source":["# 7. In variable cannot Give Space between Variable Names.\n","\n","Channel Name = \"CodewithAK\"\n","print(Channel Name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"CKHg_P1AGFd2","executionInfo":{"status":"error","timestamp":1736930049565,"user_tz":-330,"elapsed":845,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"912af69f-ecc6-4eca-d768-15c534d117f7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-6-6502703f26ff>, line 3)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-6502703f26ff>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    Channel Name = \"CodewithAK\"\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["# 8.  A variable name cannot be any of the Python keywords.\n","\n","#     For Examples :- Print , Class , in , or, and, True, False ....."],"metadata":{"id":"fJ8u4KZ9HCZ_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Data Types in Python**"],"metadata":{"id":"gWBRoCLaHQwu"}},{"cell_type":"markdown","source":["**Data Types**\n","\n","Data Types are used to define the type of a variable. It defines what type of data we are going to store in a variable.\n","\n","Text Type  :  Str\n","\n","Numeric Type :  int , float , complex\n","\n","Sequence Type :  list , tuple , range\n","\n","Mapping Type :  dict\n","\n","Set Type : set , frozenset\n","\n","Boolean Type : bool\n","\n","Binary Type : bytes ,  bytearray ,  memoryview\n","\n","None Type : NooneType"],"metadata":{"id":"NcT-gYrPI6GC"}},{"cell_type":"code","source":["x = 5\n","print(type(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SrW9Hth-Jetg","executionInfo":{"status":"ok","timestamp":1736931157330,"user_tz":-330,"elapsed":533,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"bc420ff7-ee5c-4152-fffd-95ecc5970559"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'int'>\n"]}]},{"cell_type":"markdown","source":["**DataType Output: str**\n","\n","(A string is used to represent text (a string of characters) in python,\n","Strings must be surrounded using quotations (either the single quote  '  or the double quote  \"). )\n","\n","For Example :-  \n","\n","a = \"Anurag Kumar\"\n","\n","\n","\n","**DataType Output : int**\n","\n","(Intergers represent positive or negative whole numbers, from negative infinity to infinity. )\n","\n","For example :-\n","\n","b = 50\n","\n","**DataType Output : float**\n","\n","float (The float type is used for decimal numbers)\n","\n","For example :-\n","\n","c = 60.5\n","\n","**DataType Output : Complex**\n","\n","Complex (holds complex numbers)\n","\n","For Example :-\n","\n","d = 3j\n","\n","\n"],"metadata":{"id":"qvEgF4BWMysG"}},{"cell_type":"markdown","source":["**Containers Data Types**\n","\n","***DataType Output : List***\n","\n","(List are used to store multiple items in  a single variable. List Items are ordered, changeable, and allow duplicate values.)\n","\n"],"metadata":{"id":"f8Awc7YpQ5iZ"}},{"cell_type":"code","source":["# For Example :-\n","\n","Fruits = [\"Apple\" , \"Banana\" , \"Mango\"]\n","print(Fruits)\n","\n","# Accessing elements by index\n","print(Fruits[0])\n","print(Fruits[1])\n","\n","# Modifying an element\n","Fruits[1] = \"orange\"\n","print(Fruits)\n","\n","# Adding an element\n","Fruits.append(\"grape\")\n","print(Fruits)\n","\n","# Removing an element\n","Fruits.remove('orange')\n","print(Fruits)\n","\n","# List of mixed data types\n","mixed_list = [1, \"hello\", 3.14, True]\n","print(mixed_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8g6CEJx2P5si","executionInfo":{"status":"ok","timestamp":1736933513859,"user_tz":-330,"elapsed":527,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"0acabc75-7903-43c3-ba09-cd490c9f663b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Apple', 'Banana', 'Mango']\n","Apple\n","Banana\n","['Apple', 'orange', 'Mango']\n","['Apple', 'orange', 'Mango', 'grape']\n","['Apple', 'Mango', 'grape']\n","[1, 'hello', 3.14, True]\n"]}]},{"cell_type":"markdown","source":["**DataType Output : Tuple**\n","\n","(Tuples are used to store multiple items in a single variable. A tuple is a collection which is ordered and unchangeable.)\n","\n"],"metadata":{"id":"5NC02UJxUENa"}},{"cell_type":"code","source":["# For Example :-\n","\n","# Creating a tuple of colors\n","colors = (\"red\", \"green\", \"blue\")\n","\n","# Accessing elements by index (same as lists)\n","print(colors[0])\n","print(colors[1])\n","\n","# Trying to modify a tuple (this will cause an error)\n","# colors[1] = \"yellow\"  # TypeError: 'tuple' object does not support item assignment\n","\n","# Creating a tuple with mixed data types\n","mixed_tuple = (1, \"world\", 2.71, False)\n","print(mixed_tuple)\n","\n","# Tuple with a single element (note the trailing comma)\n","single_element_tuple = (5,)\n","print(type(single_element_tuple))\n","\n","not_a_tuple = (5)\n","print(type(not_a_tuple))\n","\n","#Tuple packing and unpacking\n","my_tuple = (\"apple\", 3, \"banana\") #packing\n","fruit, quantity, fruit2 = my_tuple #unpacking\n","print(fruit)\n","print(quantity)\n","print(fruit2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iu4heUw_VE26","executionInfo":{"status":"ok","timestamp":1736933928196,"user_tz":-330,"elapsed":559,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"4e56ec39-bef1-45d2-aedf-6b1b0f9b6c27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["red\n","green\n","(1, 'world', 2.71, False)\n","<class 'tuple'>\n","<class 'int'>\n","apple\n","3\n","banana\n"]}]},{"cell_type":"markdown","source":["**DataType Output : Range**\n","\n","Range() can be used in three ways:\n","\n","Range(stop): Generates a sequence from 0 up to (but not including) stop.\n","\n","Range(start, stop): Generates a sequence from start up to (but not including) stop.\n","\n","Range(start, stop, step): Generates a sequence from start up to (but not including) stop, incrementing by step."],"metadata":{"id":"rIQvNfSPVni7"}},{"cell_type":"code","source":["# For Example :-\n","\n","# Range(Stop)\n","for i in range(5):\n","    print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InP2uY6SXsUV","executionInfo":{"status":"ok","timestamp":1736934824686,"user_tz":-330,"elapsed":532,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"2661d7bf-8f11-46c3-afec-527cf3ddb224"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n"]}]},{"cell_type":"code","source":["# Range(Start, Stop)\n","\n","for i in range(1, 10):\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oj7pQcyxYiYR","executionInfo":{"status":"ok","timestamp":1736934885712,"user_tz":-330,"elapsed":494,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"450edeca-a618-4512-eae6-567f842e2bd1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n"]}]},{"cell_type":"code","source":["# Range(Start, Stop, Step)\n","\n","for i in range(1, 10, 2):\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"udBcLRNeY0q5","executionInfo":{"status":"ok","timestamp":1736934958661,"user_tz":-330,"elapsed":15,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"f7cefa54-00d4-4fa2-8481-a181049262f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","3\n","5\n","7\n","9\n"]}]},{"cell_type":"code","source":["# to create range in list\n","\n","my_range = range(0, 10, 2)\n","my_list = list(my_range)\n","print(my_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4yrK_6a9ZImR","executionInfo":{"status":"ok","timestamp":1736935028658,"user_tz":-330,"elapsed":642,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"e936b898-4908-47bc-cae1-cb0cbfb930b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 2, 4, 6, 8]\n"]}]},{"cell_type":"markdown","source":["**DataType Output : Dictionaries**\n","\n","(Dictionaries are used to store data values in key:value pairs.)"],"metadata":{"id":"p0HgTbaPZq1X"}},{"cell_type":"code","source":["# For Example :-\n","\n","# Empty dictionary\n","my_dict = {}\n","\n","# Dictionary with initial key-value pairs\n","person = {\n","    \"name\": \"Alice\",\n","    \"age\": 30,\n","    \"city\": \"New York\"\n","}\n","\n","# Accessing Values:\n","print(person[\"name\"])\n","print(person[\"age\"])\n","\n","print(person.get(\"country\")) # Output: None (no error)\n","print(person.get(\"country\", \"USA\"))\n","\n","# Adding a new key-value pair:\n","person['occupation'] = \"Engineer\"\n","print(person)\n","\n","# Modifying an existing value:\n","\n","person['age'] = 31\n","print(person)\n","\n","# Removing a key-value pair:\n","del person['city']\n","print(person)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6RRZlrjyaZ7W","executionInfo":{"status":"ok","timestamp":1736936172270,"user_tz":-330,"elapsed":509,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"d0821e7f-23f2-4072-9658-8a190d9d0f25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Alice\n","30\n","None\n","USA\n","{'name': 'Alice', 'age': 30, 'city': 'New York', 'occupation': 'Engineer'}\n","{'name': 'Alice', 'age': 31, 'city': 'New York', 'occupation': 'Engineer'}\n","{'name': 'Alice', 'age': 31, 'occupation': 'Engineer'}\n"]}]},{"cell_type":"markdown","source":["**DataType Output : Set**\n","\n","(Sets are used to  store multiple items in a single variable. A set is a collection which is unordered, unchangeable, and unindexed.)"],"metadata":{"id":"XmMKesLEd4W3"}},{"cell_type":"code","source":["# Using curly braces\n","my_set = {1, 2, 3, 2}\n","print(my_set)\n","\n","# Using the set() constructor\n","my_list = [1, 2, 2, 3, 4, 4, 5]\n","my_set = set(my_list)\n","print(my_set)\n","\n","# Empty set (you MUST use set() for an empty set)\n","empty_set = set()\n","print(type(empty_set))\n","\n","# empty_set = {} This creates a dictionary not a set\n","# print(type(empty_set)) #Output: <class 'dict'>\n","\n","# Set Operations:\n","\n","set1 = {1, 2, 3, 4, 5}\n","set2 = {4, 5, 6, 7, 8}\n","\n","print(set1 | set2)  # Union: {1, 2, 3, 4, 5, 6, 7, 8}\n","print(set1 & set2)  # Intersection: {4, 5}\n","print(set1 - set2)  # Difference: {1, 2, 3}\n","print(set2 - set1) # Difference: {6, 7, 8}\n","print(set1 ^ set2)  # Symmetric Difference: {1, 2, 3, 6, 7, 8}\n","\n","# Set Methods:\n","my_set = {1, 2, 3}\n","my_set.add(4)\n","print(my_set)\n","\n","my_set.remove(2)\n","print(my_set)\n","\n","my_set.discard(5) #no error\n","print(my_set)\n","\n","my_set.pop() #remove 1\n","print(my_set)\n","\n","my_set.clear()\n","print(my_set)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDsqFbtbhlTk","executionInfo":{"status":"ok","timestamp":1736937570145,"user_tz":-330,"elapsed":529,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"c19bfb35-7862-4a74-84aa-5b8ea04406ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3}\n","{1, 2, 3, 4, 5}\n","<class 'set'>\n","{1, 2, 3, 4, 5, 6, 7, 8}\n","{4, 5}\n","{1, 2, 3}\n","{8, 6, 7}\n","{1, 2, 3, 6, 7, 8}\n","{1, 2, 3, 4}\n","{1, 3, 4}\n","{1, 3, 4}\n","{3, 4}\n","set()\n"]}]},{"cell_type":"markdown","source":["**DataType Output : Bool**\n","\n","(The bool() function allows you to evaluate any value, and give you True or False in return).\n","\n","**Comparison operators:** These operators compare two values and return a Boolean result.\n","\n","== (equal to)\n","\n","!= (not equal to)\n","\n","(>greater than)\n","\n","< (less than)\n","\n","(>=greater than or equal to)\n","\n","<= (less than or equal to)\n","\n","**Logical operators:** These operators combine or modify Boolean values.\n","\n","and: Returns True if both operands are True.\n","\n","or: Returns True if at least one operand is True.\n","\n","not: Returns the opposite Boolean value of the operand.\n","\n","\n","\n","\n","**bool() function:** This function can convert other data types to Boolean values.\n","\n","Most values are considered \"truthy\" and will return True when passed to bool().\n","The following values are considered \"falsy\" and will return False:\n","\n","False\n","\n","None\n","\n","0 (integer zero)\n","\n","0.0 (float zero)\n","\n","Empty sequences (e.g., \"\", [], ())\n","\n","Empty mappings (e.g., {})\n","\n","bool(10)       # True\n","\n","bool(0)        # False\n","\n","bool(\"hello\")  # True\n","\n","bool(\"\")       # False\n","\n","bool([1, 2])   # True\n","\n","bool([])       # False\n","\n","**Conditional statements:** Booleans are used to control the execution of code blocks in if, elif, and else statements.\n","\n","**Loops:** Booleans can be used to control the termination of while loops.\n","\n"],"metadata":{"id":"Id7Li5hGjFKC"}},{"cell_type":"code","source":["# For Example :-\n","\n","# Comaprison Operators\n","\n","a = 5\n","b = 10\n","result = a < b\n","print(result)\n","\n","# Logical Operators\n","\n","x = True\n","Y = True\n","result = x and Y\n","print(result)\n","\n","x = True\n","y = False\n","result = x and y\n","print(result)\n","\n","result = x or y\n","print(result)\n","\n","result = not x\n","print(result)\n","\n","# Conditional Statement if, else, elif\n","age = 20\n","if age >= 18:\n","    print(\"You are an adult.\")\n","else:\n","    print(\"You are a minor.\")\n","\n","# Loops: Booleans can be used to control the termination of while loops.\n","\n","count = 0\n","while count < 6:\n","    print(count)\n","    count += 1\n"],"metadata":{"id":"a9R03t4Pjke-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1737021112156,"user_tz":-330,"elapsed":777,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"d7c76972-c34b-41ae-8dc4-29fa5a1face6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","False\n","True\n","False\n","You are an adult.\n","0\n","1\n","2\n","3\n","4\n","5\n"]}]},{"cell_type":"markdown","source":["**DataType Output : NoneType**\n","\n","(The None Type includes a single value None, used to indicate the absence of a value, None"],"metadata":{"id":"UFVpJTUVjjIX"}},{"cell_type":"code","source":["def say_hello(name):\n","    print(\"Hello, \" + name)\n","\n","result = say_hello(\"Alice\")\n","print(result)\n","\n","# Example usage 1: Item is present\n","\n","def find_item(item, my_list):\n","    if item in my_list:\n","        return True\n","    else:\n","        return None\n","\n","my_items = [\"apple\", \"banana\", \"orange\"]\n","result1 = find_item(\"banana\", my_items)\n","print(result1)\n","\n","# Example usage 2: Item is not present\n","result2 = find_item(\"grape\", my_items)\n","print(result2)\n","\n","# Example usage 3: Empty list\n","empty_list = []\n","result3 = find_item(\"apple\", empty_list)\n","print(result3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tLTEpA9tkEg5","executionInfo":{"status":"ok","timestamp":1737022315494,"user_tz":-330,"elapsed":558,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"bfa4c673-66f1-4672-9611-28e7301ad29d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice\n","None\n","True\n","None\n","None\n"]}]},{"cell_type":"markdown","source":["**If-else Statement :**\n","\n","If-else statement is used to make a decision it checks a condition and executes one block of code if the condition it true, and another block of code if the condition is false."],"metadata":{"id":"SGkysvdtkUO2"}},{"cell_type":"code","source":["# If , else , elif\n","\n","age = 22\n","if age >= 20:\n","  print(\"You are an adult.\")\n","else:\n","  print(\"You are Not an Adult.\")\n","\n","score = int(input(\"Enter your score: \"))\n","\n","if score >= 90:\n","    grade = \"A\"\n","elif score >= 80:\n","    grade = \"B\"\n","elif score >= 70:\n","    grade = \"C\"\n","elif score >= 60:\n","    grade = \"D\"\n","else:\n","    grade = \"F\"\n","\n","print(\"Your grade is:\", grade)\n"],"metadata":{"id":"ff3d5o0-orHe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1737023857497,"user_tz":-330,"elapsed":12681,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"c5717da8-0389-4a37-bd0a-b8bc717f3543"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["You are an adult.\n","Enter your score: 108\n","Your grade is: A\n"]}]},{"cell_type":"markdown","source":["**While Loop :**\n","\n","A while Loop repeats a block of code an unknown number of times until a condition is no longer met."],"metadata":{"id":"GbSIVqVBswsA"}},{"cell_type":"code","source":["count = 0\n","while count < 6:\n","  print(count)\n","  count += 1\n","\n","Count = 0\n","while Count < 6:\n","  print(\"Count is\", Count)\n","  Count += 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v7PqXVAKp09r","executionInfo":{"status":"ok","timestamp":1737024620989,"user_tz":-330,"elapsed":472,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"84fcce40-3b56-468f-d27a-9792967cd7fe"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n","5\n","Count is 0\n","Count is 1\n","Count is 2\n","Count is 3\n","Count is 4\n","Count is 5\n"]}]},{"cell_type":"code","source":["# program display numbers from 1 to 5\n","\n","# initialize the variable\n","i = 1\n","n = 5\n","\n","# while loop from i = 1 to 5\n","while i <= n:\n","    print(i)\n","    i = i + 1\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yCAPxaqIvVDS","executionInfo":{"status":"ok","timestamp":1737024917565,"user_tz":-330,"elapsed":460,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"c7e17c0b-0ce2-4809-c168-7dde3da99280"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n"]}]},{"cell_type":"markdown","source":["**For Loop :**\n","\n","For loop is used to iterate over a sequence (such as a list, tuple, or string) and execute a block of code for each item in the sequence, making it easier to perform repetitive tasks."],"metadata":{"id":"oiEQUKn-w3Ef"}},{"cell_type":"code","source":["fruits = [\"apple\", \"banana\", \"cherry\"]\n","\n","for x in fruits:\n","  print(x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a5GY9K4YzJ7d","executionInfo":{"status":"ok","timestamp":1737026033159,"user_tz":-330,"elapsed":452,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"35e97a28-a2b4-4eb6-c486-443f3fa341dd"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["apple\n","banana\n","cherry\n"]}]},{"cell_type":"code","source":["n = 5\n","for i in range(0, n):\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vc8jU3B6zx_6","executionInfo":{"status":"ok","timestamp":1737025987053,"user_tz":-330,"elapsed":10,"user":{"displayName":"anurag kumar","userId":"07772660597975520108"}},"outputId":"e2255a9b-e79a-40a4-8a47-696170a50055"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n"]}]}]}